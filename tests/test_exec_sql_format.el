(require 'ert)
(require 'cl-lib)
(add-to-list 'load-path (expand-file-name ".." (file-name-directory load-file-name)))
(require 'exec-sql-format)

(ert-deftest exec-sql-format-next-block-uses-parser ()
  (let ((content "EXEC SQL select * from dual;\nEXEC SQL include foo;\n")
        (expected "EXEC SQL SELECT * FROM DUAL;\nEXEC SQL include foo;\n"))
    (with-temp-buffer
      (insert content)
      (goto-char (point-min))
      (cl-letf (((symbol-function 'shell-command-on-region)
                 (lambda (start end command output-buffer replace error-buffer display)
                   (let ((text (buffer-substring start end)))
                     (with-current-buffer (get-buffer-create output-buffer)
                       (erase-buffer)
                       (insert (upcase text))))))
                ((symbol-function 'exec-sql-goto-next)
                 (lambda (&optional _)
                   (let ((info (list :offset 0 :length (length "EXEC SQL select * from dual;"))))
                     (goto-char (point-min))
                     info))))
        (exec-sql-format-next-block))
      (should (string= expected (buffer-string))))))

(ert-run-tests-batch-and-exit)
